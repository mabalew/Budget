!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AVG	expense.h	/^	AVG,$/;"	e	enum:price	file:
CATEGORY_H	category.h	2;"	d	file:
CATEGORY_UTILS_H	category_utils.h	2;"	d	file:
CC	Makefile	/^CC=gcc$/;"	m
CONFIG_H	config.h	2;"	d	file:
Category	category.h	/^} Category;$/;"	t	typeref:struct:category	file:
DB_FILE	db.h	4;"	d	file:
DB_H	db.h	2;"	d	file:
DEBUG	log.h	/^	DEBUG,$/;"	e	enum:log_level	file:
ERROR	log.h	/^	ERROR$/;"	e	enum:log_level	file:
EXPENSE_H	expense.h	2;"	d	file:
EXPENSE_UTILS_H	expense_utils.h	2;"	d	file:
Expense	expense.h	/^} Expense;$/;"	t	typeref:struct:expense	file:
GTK_OPTS	Makefile	/^GTK_OPTS=`pkg-config --cflags --libs gtk+-2.0` -export-dynamic$/;"	m
HELP_H	help.h	2;"	d	file:
INFO	log.h	/^	INFO,$/;"	e	enum:log_level	file:
LOG_DB_FILE	db.h	5;"	d	file:
LOG_H	log.h	2;"	d	file:
Level	log.h	/^} Level;$/;"	t	typeref:enum:log_level	file:
Log	log.h	/^} Log;$/;"	t	typeref:struct:log	file:
MAX	expense.h	/^	MAX$/;"	e	enum:price	file:
MIN	expense.h	/^	MIN = 0,$/;"	e	enum:price	file:
OPTS	Makefile	/^OPTS=-lsqlite3 -g3 -O0 -Wall $/;"	m
PRODUCT_H	product.h	2;"	d	file:
PRODUCT_UTILS_H	product_utils.h	2;"	d	file:
Product	product.h	/^} Product;$/;"	t	typeref:struct:product	file:
REPORT_H	report.h	2;"	d	file:
Row	report.h	/^} Row;$/;"	t	typeref:struct:report_row	file:
SHOP_H	shop.h	2;"	d	file:
SHOP_UTILS_H	shop_utils.h	2;"	d	file:
STRING_VERIFIER_H	string_verifier.h	2;"	d	file:
Shop	shop.h	/^} Shop;$/;"	t	typeref:struct:shop	file:
TARGET_PATH	Makefile	/^TARGET_PATH=..$/;"	m
TRACE	log.h	/^	TRACE = 0,$/;"	e	enum:log_level	file:
USER_H	user.h	2;"	d	file:
USER_UTILS_H	user_utils.h	2;"	d	file:
UTILS_H	utils.h	20;"	d	file:
User	user.h	/^} User;$/;"	t	typeref:struct:user	file:
WARN	log.h	/^	WARN,$/;"	e	enum:log_level	file:
__add_category	category_utils.c	/^int __add_category(int argc, char *argv[]) {$/;"	f
__add_expense	expense_utils.c	/^int __add_expense(int argc, char *argv[]) {$/;"	f
__add_product	product_utils.c	/^int __add_product(int argc, char *argv[]) {$/;"	f
__add_shop	shop_utils.c	/^int __add_shop(int argc, char *argv[]) {$/;"	f
__add_to_category	product_utils.c	/^int __add_to_category(int argc, char *argv[]) {$/;"	f
__add_user	user_utils.c	/^void __add_user(char *argv[]) {$/;"	f
__del_category	category_utils.c	/^int __del_category(int argc, char *argv[]) {$/;"	f
__del_expense	expense_utils.c	/^int __del_expense(int argc, char *argv[]) {$/;"	f
__del_product	product_utils.c	/^int __del_product(int argc, char *argv[]) {$/;"	f
__del_shop	shop_utils.c	/^int __del_shop(int argc, char *argv[]) {$/;"	f
__del_user	user_utils.c	/^void __del_user(char *argv[]) {$/;"	f
__get_user_by_id	user_utils.c	/^void __get_user_by_id(char *argv[]) {$/;"	f
__get_user_by_login	user_utils.c	/^void __get_user_by_login(char *argv[]) {$/;"	f
__list_categories	category_utils.c	/^int __list_categories() {$/;"	f
__list_expenses	expense_utils.c	/^int __list_expenses(char *year, char *month) {$/;"	f
__list_products	product_utils.c	/^int __list_products() {$/;"	f
__list_products_in_category	product_utils.c	/^int __list_products_in_category(int argc, char *argv[]) {$/;"	f
__list_shops	shop_utils.c	/^int __list_shops() {$/;"	f
__list_users	user_utils.c	/^void __list_users() {$/;"	f
__login	user_utils.c	/^void __login(char *argv[]) {$/;"	f
__show_common_help	help.c	/^void __show_common_help() {$/;"	f
__show_help_for_category_module	help.c	/^void __show_help_for_category_module() {$/;"	f
__show_help_for_expense_module	help.c	/^void __show_help_for_expense_module() {$/;"	f
__show_help_for_product_module	help.c	/^void __show_help_for_product_module() {$/;"	f
__show_help_for_shop_module	shop_utils.c	/^void __show_help_for_shop_module() {$/;"	f
__show_help_for_user_module	help.c	/^void __show_help_for_user_module() {$/;"	f
__update_category	category_utils.c	/^int __update_category(int argc, char *argv[]) {$/;"	f
__update_expense	expense_utils.c	/^int __update_expense(int argc, char *argv[]) {$/;"	f
__update_product	product_utils.c	/^int __update_product(int argc, char *argv[]) {$/;"	f
__update_shop	shop_utils.c	/^int __update_shop(int argc, char *argv[]) {$/;"	f
__update_user	user_utils.c	/^void __update_user(char *argv[]) {$/;"	f
_add_category	category_utils.c	/^int _add_category(char *name) {$/;"	f
_add_product	product_utils.c	/^int _add_product(char *name, int category_id) {$/;"	f
_add_shop	shop_utils.c	/^int _add_shop(char *name) {$/;"	f
_del_category	category_utils.c	/^int _del_category(char *name) {$/;"	f
_del_product	product_utils.c	/^int _del_product(char *name) {$/;"	f
_del_shop	shop_utils.c	/^int _del_shop(char *name) {$/;"	f
_find_price	expense.c	/^Expense **_find_price(enum price which, int product_id, double *price, int *count) {$/;"	f
_log	log.c	/^void _log(Level level, char *msg) {$/;"	f
_update_category	category_utils.c	/^int _update_category(char *old_name, char *new_name) {$/;"	f
_update_product	product_utils.c	/^int _update_product(char *old_name, char *new_name, int category_id) {$/;"	f
_update_shop	shop_utils.c	/^int _update_shop(char *old_name, char *new_name) {$/;"	f
add_category	category.c	/^int add_category(Category *c) {$/;"	f
add_config	config.c	/^int add_config(char *param_name, char *value) {$/;"	f
add_expense	expense.c	/^int add_expense(Expense *e) {$/;"	f
add_product	product.c	/^int add_product(Product *p) {$/;"	f
add_shop	shop.c	/^int add_shop(Shop *s) {$/;"	f
add_tmp_expense	expense.c	/^int add_tmp_expense(Expense *e, signed int *rowid) {$/;"	f
add_to_category	product.c	/^int add_to_category(Product *p) {$/;"	f
add_user	user.c	/^int add_user(User *p) {$/;"	f
amount	expense.h	/^	float amount;$/;"	m	struct:expense	file:
amount_entry	main.c	/^GtkWidget  *product_new_name_entry, *category_new_name_entry, *shop_new_name_entry, *count_entry, *amount_entry, *price_entry;$/;"	v
avg_price	main.c	/^double max_price, min_price, avg_price;$/;"	v
avg_value_label	main.c	/^GtkLabel  *status_label, *err_label, *avg_value_label, *shops_max_price_label, *shops_min_price_label, *sum_month_label, *sum_year_label;$/;"	v
builder	main.c	/^GtkBuilder *builder;$/;"	v
categories	db.sql	/^CREATE TABLE categories($/;"	t
categories	example/categories_pl.sql	/^CREATE TABLE categories(id integer primary key autoincrement, category_name varchar2(100) unique not null);$/;"	t
categories.category_name	db.sql	/^	id integer primary key autoincrement,$/;"	F
categories.category_name	example/categories_pl.sql	/^CREATE TABLE categories(id integer primary key autoincrement, category_name varchar2(100) unique not null);$/;"	F
categories.id	db.sql	/^CREATE TABLE categories($/;"	F
categories.id	example/categories_pl.sql	/^CREATE TABLE categories(id integer primary key autoincrement, category_name varchar2(100) unique not null);$/;"	F
categories_store	main.c	/^GtkListStore *products_store, *categories_store, *shops_store, *monthly_expenses_store, *yearly_expenses_store, *shopping_list_store;$/;"	v
category	category.h	/^typedef struct category {$/;"	s	file:
category	expense.h	/^	char *category;$/;"	m	struct:expense	file:
category	report.h	/^	char *category;$/;"	m	struct:report_row	file:
category_id	expense.h	/^	int category_id;$/;"	m	struct:expense	file:
category_id	product.h	/^	int category_id;$/;"	m	struct:product	file:
category_new_name_entry	main.c	/^GtkWidget  *product_new_name_entry, *category_new_name_entry, *shop_new_name_entry, *count_entry, *amount_entry, *price_entry;$/;"	v
check_db_open	db.c	/^void check_db_open(int error) {$/;"	f
config	db.sql	/^CREATE TABLE config($/;"	t
config.param	db.sql	/^CREATE TABLE config($/;"	F
config.value	db.sql	/^	param varchar2(100) primary key,$/;"	F
config_exists	config.c	/^int config_exists(char *param_name, int *count) {$/;"	f
configured_level	log.c	/^int configured_level = -1;$/;"	v
count	expense.h	/^	int count;$/;"	m	struct:expense	file:
count_entry	main.c	/^GtkWidget  *product_new_name_entry, *category_new_name_entry, *shop_new_name_entry, *count_entry, *amount_entry, *price_entry;$/;"	v
count_monthly_categories	report.c	/^int count_monthly_categories(char *year, char *month) {$/;"	f
count_yearly_categories	report.c	/^int count_yearly_categories(char *year) {$/;"	f
create_expense_from_form	main.c	/^void create_expense_from_form(Expense *e) {$/;"	f
date	log.h	/^	char *date;$/;"	m	struct:log	file:
del_category	category.c	/^int del_category(Category *c) {$/;"	f
del_expense	expense.c	/^int del_expense(Expense *e) {$/;"	f
del_product	product.c	/^int del_product(Product *p) {$/;"	f
del_shop	shop.c	/^int del_shop(Shop *s) {$/;"	f
del_user	user.c	/^int del_user(User *p) {$/;"	f
delete_new_expense_button	main.c	/^GtkButton *min_button, *max_button, *delete_new_expense_button;$/;"	v
err_label	main.c	/^GtkLabel  *status_label, *err_label, *avg_value_label, *shops_max_price_label, *shops_min_price_label, *sum_month_label, *sum_year_label;$/;"	v
exp_categories_combo	main.c	/^GtkComboBox  *product_new_categories_cb, *exp_categories_combo, *exp_shops_combo, *exp_products_combo;$/;"	v
exp_date	expense.h	/^	char *exp_date;$/;"	m	struct:expense	file:
exp_products_combo	main.c	/^GtkComboBox  *product_new_categories_cb, *exp_categories_combo, *exp_shops_combo, *exp_products_combo;$/;"	v
exp_shops_combo	main.c	/^GtkComboBox  *product_new_categories_cb, *exp_categories_combo, *exp_shops_combo, *exp_products_combo;$/;"	v
expense	expense.h	/^typedef struct expense {$/;"	s	file:
expenses	db.sql	/^CREATE TABLE expenses($/;"	t
expenses.amount	db.sql	/^	exp_date datetime default CURRENT_TIMESTAMP,$/;"	F
expenses.exp_date	db.sql	/^	id integer primary key autoincrement,$/;"	F
expenses.id	db.sql	/^CREATE TABLE expenses($/;"	F
expenses.price	db.sql	/^	shop_id integer default 0,$/;"	F
expenses.product_id	db.sql	/^	amount double default 1.0,$/;"	F
expenses.shop_id	db.sql	/^	product_id integer not null,$/;"	F
fetch_category_list	main.c	/^void fetch_category_list() {$/;"	f
fetch_monthly_exp_list	main.c	/^void fetch_monthly_exp_list() {$/;"	f
fetch_monthly_report	report.c	/^void fetch_monthly_report(char *year, char *month, Row **rows) {$/;"	f
fetch_product_list	main.c	/^void fetch_product_list() {$/;"	f
fetch_shop_list	main.c	/^void fetch_shop_list() {$/;"	f
fetch_yearly_exp_list	main.c	/^void fetch_yearly_exp_list() {$/;"	f
fetch_yearly_report	report.c	/^void fetch_yearly_report(char *year, Row **rows) {$/;"	f
fill_expense	expense.c	/^void fill_expense(sqlite3_stmt *res, Expense *e) {$/;"	f
find_avg_price	expense.c	/^double find_avg_price(int product_id) {$/;"	f
find_max_price	expense.c	/^Expense **find_max_price(int product_id, double *max_price, int *count) {$/;"	f
find_min_price	expense.c	/^Expense **find_min_price(int product_id, double *min_price, int *count) {$/;"	f
free_category_list	category_utils.c	/^void free_category_list(Category *list[], int size) {$/;"	f
free_expense_list	expense_utils.c	/^void free_expense_list(Expense *list[], int size) {$/;"	f
free_expense_list2	report.c	/^void free_expense_list2(Expense **e, int count) {$/;"	f
free_product_list	product_utils.c	/^void free_product_list(Product *list[], int size) {$/;"	f
free_rows_list	report.c	/^void free_rows_list(Row **rows, int count) {$/;"	f
free_shop_list	shop_utils.c	/^void free_shop_list(Shop *list[], int size) {$/;"	f
get_all_categories	category.c	/^int get_all_categories(Category *list[]) {$/;"	f
get_all_expenses	expense.c	/^int get_all_expenses(Expense *list[]) {$/;"	f
get_all_products	product.c	/^int get_all_products(Product *list[]) {$/;"	f
get_all_shops	shop.c	/^int get_all_shops(Shop *list[]) {$/;"	f
get_all_users	user.c	/^int get_all_users(User *list[]) {$/;"	f
get_categories_count	category.c	/^int get_categories_count() {$/;"	f
get_category_by_id	category.c	/^int get_category_by_id(Category *c) {$/;"	f
get_category_by_name	category.c	/^int get_category_by_name(Category *c) {$/;"	f
get_config	config.c	/^int get_config(char *param_name, char *value) {$/;"	f
get_exp_from	report.c	/^void get_exp_from(char *argv[], Expense **list) {$/;"	f
get_expense	expense.c	/^int get_expense(int expense_id, Expense *e) {$/;"	f
get_expense_by_id	expense.c	/^int get_expense_by_id(Expense *e) {$/;"	f
get_expenses	expense.c	/^int get_expenses(char *year, char *month, Expense *list[]) {$/;"	f
get_expenses_count	expense.c	/^int get_expenses_count(char *year, char *month) {$/;"	f
get_id_from_combo	main.c	/^int get_id_from_combo(GtkComboBox *combo, int *id) {$/;"	f
get_logs	log.c	/^void get_logs(Level level, Log *list[]) {$/;"	f
get_logs_count	log.c	/^int get_logs_count(Level level) {$/;"	f
get_monthly_expenses	report.c	/^void get_monthly_expenses(char *year, char *month, Row **rows) {$/;"	f
get_product_by_id	product.c	/^int get_product_by_id(Product *p) {$/;"	f
get_product_by_name	product.c	/^int get_product_by_name(Product *p) {$/;"	f
get_products_count	product.c	/^int get_products_count(int category_id) {$/;"	f
get_products_in_category	product.c	/^int get_products_in_category(int category_id, Product *list[]) {$/;"	f
get_shop_by_id	shop.c	/^int get_shop_by_id(Shop *s) {$/;"	f
get_shop_by_name	shop.c	/^int get_shop_by_name(Shop *s) {$/;"	f
get_shops_count	shop.c	/^int get_shops_count() {$/;"	f
get_user_by_id	user.c	/^int get_user_by_id(User *p) {$/;"	f
get_user_by_login	user.c	/^int get_user_by_login(User *p) {$/;"	f
get_users_count	user.c	/^int get_users_count() {$/;"	f
help	help.c	/^void help(char *h) {$/;"	f
id	category.h	/^	int id;$/;"	m	struct:category	file:
id	expense.h	/^	int id;$/;"	m	struct:expense	file:
id	log.h	/^	int id;$/;"	m	struct:log	file:
id	product.h	/^	int id;$/;"	m	struct:product	file:
id	shop.h	/^	int id;$/;"	m	struct:shop	file:
id	user.h	/^	int  id;$/;"	m	struct:user	file:
init_components	main.c	/^void init_components() {$/;"	f
is_add_string	string_verifier.c	/^bool is_add_string(char *s) {$/;"	f
is_add_to_category_string	string_verifier.c	/^bool is_add_to_category_string(char *s) {$/;"	f
is_delete_string	string_verifier.c	/^bool is_delete_string(char *s) {$/;"	f
is_get_by_id_string	string_verifier.c	/^bool is_get_by_id_string(char *s) {$/;"	f
is_get_by_login_string	string_verifier.c	/^bool is_get_by_login_string(char *s) {$/;"	f
is_help_for_category_module	string_verifier.c	/^bool is_help_for_category_module(char *s) {$/;"	f
is_help_for_expense_module	string_verifier.c	/^bool is_help_for_expense_module(char *s) {$/;"	f
is_help_for_shop_module	string_verifier.c	/^bool is_help_for_shop_module(char *s) {$/;"	f
is_help_for_user_module	string_verifier.c	/^bool is_help_for_user_module(char *s) {$/;"	f
is_help_string	string_verifier.c	/^bool is_help_string(char *s) {$/;"	f
is_list_products_in_category_string	string_verifier.c	/^bool is_list_products_in_category_string(char *s) {$/;"	f
is_list_string	string_verifier.c	/^bool is_list_string(char *s) {$/;"	f
is_login_string	string_verifier.c	/^bool is_login_string(char *s) {$/;"	f
is_two_digit_number	report.c	/^bool is_two_digit_number(int number) {$/;"	f
is_update_string	string_verifier.c	/^bool is_update_string(char *s) {$/;"	f
iter	main.c	/^GtkTreeIter iter;$/;"	v
level	log.h	/^  Level level;$/;"	m	struct:log	file:
list_logs	log_utils.c	/^void list_logs() {$/;"	f
log	log.h	/^typedef struct log {$/;"	s	file:
log_level	log.h	/^typedef enum log_level {$/;"	g	file:
log_levels	logs.sql	/^CREATE TABLE log_levels($/;"	t
log_levels.level	logs.sql	/^	level_id integer not null unique,$/;"	F
log_levels.level_id	logs.sql	/^CREATE TABLE log_levels($/;"	F
login	user.c	/^bool login(User *p) {$/;"	f
logs	logs.sql	/^CREATE TABLE logs($/;"	t
logs.date	logs.sql	/^	id integer primary key autoincrement,$/;"	F
logs.id	logs.sql	/^CREATE TABLE logs($/;"	F
logs.level	logs.sql	/^	date datetime DEFAULT CURRENT_TIMESTAMP,$/;"	F
logs.message	logs.sql	/^	level integer DEFAULT 0,$/;"	F
main	budget-cli.c	/^int main(int argc, char *argv[]) {$/;"	f
main	budget.c	/^int main() {$/;"	f
main	main.c	/^int main(int argc, char *argv[]) {$/;"	f
manage_category	category_utils.c	/^int manage_category(int argc, char *argv[]) {$/;"	f
manage_expense	expense_utils.c	/^int manage_expense(int argc, char *argv[]) {$/;"	f
manage_product	product_utils.c	/^int manage_product(int argc, char *argv[]) {$/;"	f
manage_shop	shop_utils.c	/^int manage_shop(int argc, char *argv[]) {$/;"	f
manage_user	user_utils.c	/^void manage_user(int argc, char *argv[]) {$/;"	f
max_button	main.c	/^GtkButton *min_button, *max_button, *delete_new_expense_button;$/;"	v
max_expenses	main.c	/^Expense **max_expenses, **min_expenses;$/;"	v
max_expenses_count	main.c	/^int max_expenses_count, min_expenses_count, selected_category_id=0;$/;"	v
max_price	main.c	/^double max_price, min_price, avg_price;$/;"	v
min_button	main.c	/^GtkButton *min_button, *max_button, *delete_new_expense_button;$/;"	v
min_expenses	main.c	/^Expense **max_expenses, **min_expenses;$/;"	v
min_expenses_count	main.c	/^int max_expenses_count, min_expenses_count, selected_category_id=0;$/;"	v
min_price	main.c	/^double max_price, min_price, avg_price;$/;"	v
monthly_expenses_store	main.c	/^GtkListStore *products_store, *categories_store, *shops_store, *monthly_expenses_store, *yearly_expenses_store, *shopping_list_store;$/;"	v
msg	log.h	/^	char *msg;$/;"	m	struct:log	file:
name	category.h	/^	char *name;$/;"	m	struct:category	file:
name	product.h	/^	char *name;$/;"	m	struct:product	file:
name	shop.h	/^	char *name;$/;"	m	struct:shop	file:
new_category_name	main.c	/^char *old_product_name, *old_category_name, *new_category_name, *old_shop_name, *new_shop_name;$/;"	v
new_shop_name	main.c	/^char *old_product_name, *old_category_name, *new_category_name, *old_shop_name, *new_shop_name;$/;"	v
nick	user.h	/^	char *nick;$/;"	m	struct:user	file:
old_category_name	main.c	/^char *old_product_name, *old_category_name, *new_category_name, *old_shop_name, *new_shop_name;$/;"	v
old_product_name	main.c	/^char *old_product_name, *old_category_name, *new_category_name, *old_shop_name, *new_shop_name;$/;"	v
old_shop_name	main.c	/^char *old_product_name, *old_category_name, *new_category_name, *old_shop_name, *new_shop_name;$/;"	v
on_add_new_expense_button_clicked	main.c	/^void on_add_new_expense_button_clicked(GtkWidget *widget, gpointer data) {$/;"	f
on_category_add_button_clicked	main.c	/^void on_category_add_button_clicked(GtkWidget *widget, gpointer data) {$/;"	f
on_category_delete_button_clicked	main.c	/^void on_category_delete_button_clicked(GtkWidget *widget, gpointer data) {$/;"	f
on_category_update_button_clicked	main.c	/^void on_category_update_button_clicked(GtkWidget *widget, gpointer data) {$/;"	f
on_exp_categories_combo_changed	main.c	/^void on_exp_categories_combo_changed(GtkWidget *widget, gpointer data) {$/;"	f
on_exp_shops_combo_changed	main.c	/^void on_exp_shops_combo_changed(GtkWidget *widget, gpointer data) {$/;"	f
on_product_new_add_button_clicked	main.c	/^void on_product_new_add_button_clicked(GtkObject *object, gpointer data) {$/;"	f
on_product_new_update_button_clicked	main.c	/^void on_product_new_update_button_clicked(GtkWidget *widget, gpointer data) {$/;"	f
on_shop_add_button_clicked	main.c	/^void on_shop_add_button_clicked(GtkWidget *widget, gpointer data) {$/;"	f
on_shop_delete_button_clicked	main.c	/^void on_shop_delete_button_clicked(GtkWidget *widget, gpointer data) {$/;"	f
on_shop_update_button_clicked	main.c	/^void on_shop_update_button_clicked(GtkWidget *widget, gpointer data) {$/;"	f
on_treeview_categories_changed	main.c	/^void on_treeview_categories_changed(GtkWidget *widget, gpointer window) {$/;"	f
on_treeview_products_changed	main.c	/^void on_treeview_products_changed(GtkWidget *widget, gpointer window) {$/;"	f
on_treeview_shops_changed	main.c	/^void on_treeview_shops_changed(GtkWidget *widget, gpointer data) {$/;"	f
on_window_destroy	main.c	/^void on_window_destroy(GtkObject *object, gpointer data) {$/;"	f
password	user.h	/^	char *password;$/;"	m	struct:user	file:
price	expense.h	/^	float price;$/;"	m	struct:expense	file:
price	expense.h	/^enum price {$/;"	g	file:
price_entry	main.c	/^GtkWidget  *product_new_name_entry, *category_new_name_entry, *shop_new_name_entry, *count_entry, *amount_entry, *price_entry;$/;"	v
print_expense	expense_utils.c	/^void print_expense(Expense *e) {$/;"	f
print_monthly_report	report.c	/^void print_monthly_report(Row **rows, int row_count) {$/;"	f
print_status	main.c	/^void print_status(int msg_no, int data) {$/;"	f
process_avg_price	main.c	/^void process_avg_price() {$/;"	f
process_max_price	main.c	/^void process_max_price() {$/;"	f
process_min_price	main.c	/^void process_min_price() {$/;"	f
product	expense.h	/^	char *product;$/;"	m	struct:expense	file:
product	product.h	/^typedef struct product {$/;"	s	file:
product_id	expense.h	/^	int product_id;$/;"	m	struct:expense	file:
product_new_categories_cb	main.c	/^GtkComboBox  *product_new_categories_cb, *exp_categories_combo, *exp_shops_combo, *exp_products_combo;$/;"	v
product_new_name_entry	main.c	/^GtkWidget  *product_new_name_entry, *category_new_name_entry, *shop_new_name_entry, *count_entry, *amount_entry, *price_entry;$/;"	v
products	db.sql	/^CREATE TABLE products($/;"	t
products.category_id	db.sql	/^	product_name varchar2(100),$/;"	F
products.id	db.sql	/^CREATE TABLE products($/;"	F
products.product_name	db.sql	/^	id integer primary key autoincrement,$/;"	F
products.products_idx	db.sql	/^CREATE UNIQUE INDEX products_idx on products(product_name, category_id);$/;"	i
products_store	main.c	/^GtkListStore *products_store, *categories_store, *shops_store, *monthly_expenses_store, *yearly_expenses_store, *shopping_list_store;$/;"	v
replace_str	utils.c	/^char *replace_str(char *str, char *orig, char *rep) {$/;"	f
report_row	report.h	/^typedef struct report_row {$/;"	s	file:
select_combo	main.c	/^void select_combo(GtkComboBox *combo, char *item_text) {$/;"	f
select_list	main.c	/^void select_list(GtkTreeView *tree_view, char *item_text) {$/;"	f
selected_category_id	main.c	/^int max_expenses_count, min_expenses_count, selected_category_id=0;$/;"	v
shop	expense.h	/^	char *shop;$/;"	m	struct:expense	file:
shop	shop.h	/^typedef struct shop {$/;"	s	file:
shop_id	expense.h	/^	int shop_id;$/;"	m	struct:expense	file:
shop_new_name_entry	main.c	/^GtkWidget  *product_new_name_entry, *category_new_name_entry, *shop_new_name_entry, *count_entry, *amount_entry, *price_entry;$/;"	v
shopping_list_store	main.c	/^GtkListStore *products_store, *categories_store, *shops_store, *monthly_expenses_store, *yearly_expenses_store, *shopping_list_store;$/;"	v
shops	db.sql	/^CREATE TABLE shops($/;"	t
shops.id	db.sql	/^CREATE TABLE shops($/;"	F
shops.shop_name	db.sql	/^	id integer primary key autoincrement,$/;"	F
shops_max_price_label	main.c	/^GtkLabel  *status_label, *err_label, *avg_value_label, *shops_max_price_label, *shops_min_price_label, *sum_month_label, *sum_year_label;$/;"	v
shops_min_price_label	main.c	/^GtkLabel  *status_label, *err_label, *avg_value_label, *shops_max_price_label, *shops_min_price_label, *sum_month_label, *sum_year_label;$/;"	v
shops_store	main.c	/^GtkListStore *products_store, *categories_store, *shops_store, *monthly_expenses_store, *yearly_expenses_store, *shopping_list_store;$/;"	v
status_label	main.c	/^GtkLabel  *status_label, *err_label, *avg_value_label, *shops_max_price_label, *shops_min_price_label, *sum_month_label, *sum_year_label;$/;"	v
sum_month_label	main.c	/^GtkLabel  *status_label, *err_label, *avg_value_label, *shops_max_price_label, *shops_min_price_label, *sum_month_label, *sum_year_label;$/;"	v
sum_year_label	main.c	/^GtkLabel  *status_label, *err_label, *avg_value_label, *shops_max_price_label, *shops_min_price_label, *sum_month_label, *sum_year_label;$/;"	v
treeview_categories	main.c	/^GtkTreeView *treeview_products, *treeview_categories, *treeview_shops, *treeview_monthly_exp, *treeview_yearly_exp, *treeview_shopping_list;$/;"	v
treeview_categories_selection	main.c	/^GtkTreeSelection *treeview_products_selection, *treeview_categories_selection, *treeview_shops_selection, *treeview_monthly_exp_selection, *treeview_yearly_exp_selection, *treeview_shopping_list_selection;$/;"	v
treeview_monthly_exp	main.c	/^GtkTreeView *treeview_products, *treeview_categories, *treeview_shops, *treeview_monthly_exp, *treeview_yearly_exp, *treeview_shopping_list;$/;"	v
treeview_monthly_exp_selection	main.c	/^GtkTreeSelection *treeview_products_selection, *treeview_categories_selection, *treeview_shops_selection, *treeview_monthly_exp_selection, *treeview_yearly_exp_selection, *treeview_shopping_list_selection;$/;"	v
treeview_products	main.c	/^GtkTreeView *treeview_products, *treeview_categories, *treeview_shops, *treeview_monthly_exp, *treeview_yearly_exp, *treeview_shopping_list;$/;"	v
treeview_products_selection	main.c	/^GtkTreeSelection *treeview_products_selection, *treeview_categories_selection, *treeview_shops_selection, *treeview_monthly_exp_selection, *treeview_yearly_exp_selection, *treeview_shopping_list_selection;$/;"	v
treeview_shopping_list	main.c	/^GtkTreeView *treeview_products, *treeview_categories, *treeview_shops, *treeview_monthly_exp, *treeview_yearly_exp, *treeview_shopping_list;$/;"	v
treeview_shopping_list_selection	main.c	/^GtkTreeSelection *treeview_products_selection, *treeview_categories_selection, *treeview_shops_selection, *treeview_monthly_exp_selection, *treeview_yearly_exp_selection, *treeview_shopping_list_selection;$/;"	v
treeview_shops	main.c	/^GtkTreeView *treeview_products, *treeview_categories, *treeview_shops, *treeview_monthly_exp, *treeview_yearly_exp, *treeview_shopping_list;$/;"	v
treeview_shops_selection	main.c	/^GtkTreeSelection *treeview_products_selection, *treeview_categories_selection, *treeview_shops_selection, *treeview_monthly_exp_selection, *treeview_yearly_exp_selection, *treeview_shopping_list_selection;$/;"	v
treeview_yearly_exp	main.c	/^GtkTreeView *treeview_products, *treeview_categories, *treeview_shops, *treeview_monthly_exp, *treeview_yearly_exp, *treeview_shopping_list;$/;"	v
treeview_yearly_exp_selection	main.c	/^GtkTreeSelection *treeview_products_selection, *treeview_categories_selection, *treeview_shops_selection, *treeview_monthly_exp_selection, *treeview_yearly_exp_selection, *treeview_shopping_list_selection;$/;"	v
unit_price	expense.h	/^	float unit_price;$/;"	m	struct:expense	file:
update_category	category.c	/^int update_category(Category *old_category, Category *new_category) {$/;"	f
update_config	config.c	/^int update_config(char *param_name, char *value) {$/;"	f
update_expense	expense.c	/^int update_expense(Expense *old_expense, Expense *new_expense) {$/;"	f
update_product	product.c	/^int update_product(Product *old_product, Product *new_product) {$/;"	f
update_shop	shop.c	/^int update_shop(Shop *old_shop, Shop *new_shop) {$/;"	f
update_user	user.c	/^int update_user(User *old_user, User *new_user) {$/;"	f
user	user.h	/^typedef struct user {$/;"	s	file:
users	db.sql	/^CREATE TABLE users($/;"	t
users.id	db.sql	/^CREATE TABLE users($/;"	F
users.login	db.sql	/^	id integer primary key autoincrement,$/;"	F
users.password	db.sql	/^	login varchar2(50), password varchar2(32)$/;"	F
v_debug_logs	logs.sql	/^CREATE VIEW v_debug_logs as$/;"	V
v_error_logs	logs.sql	/^CREATE VIEW v_error_logs as$/;"	V
v_expenses	db.sql	/^CREATE VIEW v_expenses as$/;"	V
v_info_logs	logs.sql	/^CREATE VIEW v_info_logs as$/;"	V
v_logs	logs.sql	/^CREATE VIEW v_logs as$/;"	V
v_trace_logs	logs.sql	/^CREATE VIEW v_trace_logs as$/;"	V
v_warn_logs	logs.sql	/^CREATE VIEW v_warn_logs as$/;"	V
value	report.h	/^	double value;$/;"	m	struct:report_row	file:
verify_number_of_parameters	utils.c	/^void verify_number_of_parameters(int argc, int should_be) {$/;"	f
yearly_expenses_store	main.c	/^GtkListStore *products_store, *categories_store, *shops_store, *monthly_expenses_store, *yearly_expenses_store, *shopping_list_store;$/;"	v
